class Item:
    def __init__(self, weight, value):
        self.weight = weight
        self.value = value
        self.cost = value / weight

def fractional_knapsack(items, capacity):
    items.sort(key=lambda x: x.cost, reverse=True)

    total_value = 0
    knapsack = [0] * len(items)

    for i, item in enumerate(items):
        if capacity >= item.weight:
            knapsack[i] = 1
            total_value += item.value
            capacity -= item.weight
        else:
            fraction = capacity / item.weight
            knapsack[i] = fraction
            total_value += (item.value * fraction)
            break

    return total_value, knapsack

# Input from the user
num_items = int(input("Enter the number of items: "))
items = []
for i in range(num_items):
    weight = float(input(f"Enter the weight of item {i+1}: "))
    value = float(input(f"Enter the value of item {i+1}: "))
    items.append(Item(weight, value))

capacity = float(input("Enter the capacity of the knapsack: "))

max_value, selected_items = fractional_knapsack(items, capacity)

# ... (Previous code remains unchanged)

print(f"The maximum value that can be achieved is: {max_value}")
print("\nSelected items:")
print("Item\tValue\tFraction")
for i, item in enumerate(selected_items):
    if item != 0:
        fraction = item if item != 1 else 'Full'
        print(f"{i+1}\t{items[i].value}\t{fraction}")

# Matrix form
print("\nItems and Values in Matrix form:")
print("Item\tWeight\tValue")
for i, item in enumerate(items):
    print(f"{i+1}\t{item.weight}\t{item.value}")
    
print("Item\tWeight\tValue")
for i, item in enumerate(items):
    if selected_items[i] != 0:
        print(f"{i+1}\t{item.weight * selected_items[i]}\t{item.value * selected_items[i]}")
