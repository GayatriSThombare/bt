def knapsack_01(W, wt, val, n):
    # Creating a DP table to store the results of subproblems
    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]

    # Building the table in a bottom-up manner
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif wt[i - 1] <= w:
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w])
            else:
                dp[i][w] = dp[i - 1][w]

    # Determining the maximum profit
    max_profit = dp[n][W]
    
    # Determining the selected items
    selected_items = []
    total_weight = W
    for i in range(n, 0, -1):
        if max_profit <= 0:
            break
        if max_profit == dp[i - 1][total_weight]:
            continue
        else:
            selected_items.append(i - 1)
            max_profit -= val[i - 1]
            total_weight -= wt[i - 1]

    return dp[n][W], selected_items[::-1]

# Taking inputs from the user
n = int(input("Enter the number of items: "))
weights = list(map(int, input("Enter the weights of the items: ").split()))
values = list(map(int, input("Enter the values of the items: ").split()))
knapsack_capacity = int(input("Enter the knapsack capacity: "))

# Call the knapsack function and print the results
max_profit, selected_items = knapsack_01(knapsack_capacity, weights, values, n)
print("Maximum Profit:", max_profit)
print("Selected items:", selected_items)
